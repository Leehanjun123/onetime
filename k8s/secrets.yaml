apiVersion: v1
kind: Secret
metadata:
  name: onetime-app-secrets
  namespace: onetime
type: Opaque
data:
  # 이 파일은 예시입니다. 실제 프로덕션에서는 다음 명령으로 시크릿을 생성하세요:
  # kubectl create secret generic onetime-app-secrets \
  #   --from-literal=JWT_SECRET="실제-강력한-JWT-시크릿" \
  #   --from-literal=DATABASE_URL="실제-데이터베이스-URL" \
  #   --from-literal=REDIS_URL="실제-Redis-URL" \
  #   --from-literal=TOSS_SECRET_KEY="실제-토스-시크릿-키" \
  #   --namespace=onetime
  
  # Base64로 인코딩된 값들 (예시 - 실제 프로덕션에서는 변경 필요)
  JWT_SECRET: Zm1XT08xSSsxL0tla044am83Qk1xQWZXaFZLOVA2NHNmcDhENk1XTVhBN2JNPQ== # fbWO5I1/KekN8jo7BMqAfWhVK9P64sfp8D6MWMXA7bM=
  DATABASE_URL: cG9zdGdyZXNxbDovL29uZXRpbWVfdXNlcjpzdXBlcnNlY3VyZXBhc3N3b3JkQHBvZGdyZXM6NTQzMi9vbmV0aW1lX3Byb2R1Y3Rpb24= # 예시 URL
  REDIS_URL: cmVkaXM6Ly86c2VjdXJlcGFzc3dvcmRAcmVkaXM6NjM3OS8w # 예시 Redis URL
  TOSS_CLIENT_KEY: dGVzdF9ja19FeGFtcGxlQ2xpZW50S2V5 # 예시 토스 클라이언트 키
  TOSS_SECRET_KEY: dGVzdF9za19FeGFtcGxlU2VjcmV0S2V5 # 예시 토스 시크릿 키
  EMAIL_SERVICE_API_KEY: ZXhhbXBsZV9lbWFpbF9hcGlfa2V5 # 예시 이메일 API 키
  AWS_ACCESS_KEY_ID: QUtJQUVYQU1QTEVLRVk= # 예시 AWS 액세스 키
  AWS_SECRET_ACCESS_KEY: V0pYcmNzZDMxZ3hzZXhhbXBsZWtleQ== # 예시 AWS 시크릿 키
  SENTRY_DSN: aHR0cHM6Ly9leGFtcGxlQHNlbnRyeS5pby9wcm9qZWN0LWlk # 예시 Sentry DSN

---
apiVersion: v1
kind: Secret
metadata:
  name: onetime-db-secrets
  namespace: onetime
type: Opaque
data:
  # 데이터베이스 전용 시크릿
  POSTGRES_USER: b25ldGltZV91c2Vy # onetime_user
  POSTGRES_PASSWORD: c3VwZXJzZWN1cmVkYnBhc3N3b3Jk # supersecuredbpassword
  POSTGRES_DB: b25ldGltZV9wcm9kdWN0aW9u # onetime_production

---
apiVersion: v1
kind: Secret
metadata:
  name: onetime-redis-secrets
  namespace: onetime
type: Opaque
data:
  # Redis 전용 시크릿
  REDIS_PASSWORD: c2VjdXJlcmVkaXNwYXNzd29yZA== # secureredispassword

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: onetime-app-config
  namespace: onetime
data:
  NODE_ENV: "production"
  PORT: "5000"
  LOG_LEVEL: "info"
  API_RATE_LIMIT: "100"
  SESSION_TIMEOUT: "86400"
  MAINTENANCE_MODE: "false"
  ALLOWED_ORIGINS: "https://onetime.co.kr,https://www.onetime.co.kr"
  MAX_FILE_SIZE: "10485760"
  UPLOAD_DIR: "/app/uploads"
  ENABLE_SWAGGER: "false"
  ENABLE_METRICS: "true"
  AWS_REGION: "ap-northeast-2"
  AWS_S3_BUCKET: "onetime-uploads-prod"
  EMAIL_FROM: "noreply@onetime.co.kr"

---
# 시크릿 로테이션을 위한 CronJob
apiVersion: batch/v1
kind: CronJob
metadata:
  name: secret-rotation
  namespace: onetime
spec:
  schedule: "0 2 1 * *" # 매월 1일 2시에 실행
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: secret-rotator
          containers:
          - name: secret-rotator
            image: onetime/secret-rotator:latest
            env:
            - name: NAMESPACE
              value: "onetime"
            command:
            - /bin/sh
            - -c
            - |
              echo "Starting secret rotation..."
              # JWT 시크릿 로테이션
              NEW_JWT_SECRET=$(openssl rand -base64 32)
              kubectl patch secret onetime-app-secrets -p "{\"data\":{\"JWT_SECRET\":\"$(echo -n $NEW_JWT_SECRET | base64)\"}}"
              
              # 애플리케이션 재시작 (rolling restart)
              kubectl rollout restart deployment/onetime-backend
              
              echo "Secret rotation completed"
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1

---
# 시크릿 로테이션을 위한 ServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-rotator
  namespace: onetime

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: onetime
  name: secret-manager
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-manager-binding
  namespace: onetime
subjects:
- kind: ServiceAccount
  name: secret-rotator
  namespace: onetime
roleRef:
  kind: Role
  name: secret-manager
  apiGroup: rbac.authorization.k8s.io