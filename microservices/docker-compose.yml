version: '3.8'

services:
  # 데이터베이스 서비스들
  postgres:
    image: postgres:15-alpine
    container_name: onetime-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: onetime_dev
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-databases.sql:/docker-entrypoint-initdb.d/init-databases.sql
    networks:
      - onetime-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: onetime-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - onetime-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: onetime-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - onetime-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # 서비스 디스커버리 (선택적)
  consul:
    image: consul:1.15
    container_name: onetime-consul
    ports:
      - "8500:8500"
    command: consul agent -dev -client=0.0.0.0 -ui
    networks:
      - onetime-network
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 3

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: onetime-api-gateway
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      JWT_SECRET: your-super-secret-jwt-key-for-development
      REDIS_URL: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      ALLOWED_ORIGINS: http://localhost:3001,http://localhost:3000
    depends_on:
      redis:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - onetime-network
    restart: unless-stopped
    volumes:
      - ./api-gateway/logs:/app/logs

  # User Service
  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: onetime-user-service
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      DATABASE_URL: postgresql://postgres:password@postgres:5432/onetime_users
      JWT_SECRET: your-super-secret-jwt-key-for-development
      JWT_EXPIRES_IN: 24h
      REFRESH_TOKEN_EXPIRES_IN: 7d
      REDIS_URL: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      EMAIL_FROM: "원데이 <noreply@onetime.kr>"
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:3001
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      consul:
        condition: service_healthy
    networks:
      - onetime-network
    restart: unless-stopped
    volumes:
      - ./user-service/logs:/app/logs
      - ./user-service/uploads:/app/uploads

  # Job Service (구조만 정의)
  job-service:
    build:
      context: ./job-service
      dockerfile: Dockerfile
    container_name: onetime-job-service
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      DATABASE_URL: postgresql://postgres:password@postgres:5432/onetime_jobs
      JWT_SECRET: your-super-secret-jwt-key-for-development
      REDIS_URL: redis://redis:6379
      CONSUL_HOST: consul
      CONSUL_PORT: 8500
      USER_SERVICE_URL: http://user-service:3001
      SEARCH_SERVICE_URL: http://search-service:3004
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      user-service:
        condition: service_started
    networks:
      - onetime-network
    restart: unless-stopped
    profiles:
      - full-stack

  # Payment Service (구조만 정의)
  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    container_name: onetime-payment-service
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      DATABASE_URL: postgresql://postgres:password@postgres:5432/onetime_payments
      JWT_SECRET: your-super-secret-jwt-key-for-development
      REDIS_URL: redis://redis:6379
      CONSUL_HOST: consul
      TOSS_PAYMENTS_SECRET_KEY: ${TOSS_PAYMENTS_SECRET_KEY}
      TOSS_PAYMENTS_CLIENT_KEY: ${TOSS_PAYMENTS_CLIENT_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - onetime-network
    restart: unless-stopped
    profiles:
      - full-stack

  # Search Service (구조만 정의)
  search-service:
    build:
      context: ./search-service
      dockerfile: Dockerfile
    container_name: onetime-search-service
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      ELASTICSEARCH_URL: http://elasticsearch:9200
      REDIS_URL: redis://redis:6379
      CONSUL_HOST: consul
    depends_on:
      elasticsearch:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - onetime-network
    restart: unless-stopped
    profiles:
      - full-stack

  # Notification Service (구조만 정의)
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: onetime-notification-service
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      REDIS_URL: redis://redis:6379
      CONSUL_HOST: consul
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - onetime-network
    restart: unless-stopped
    profiles:
      - full-stack

  # Chat Service (구조만 정의)
  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    container_name: onetime-chat-service
    ports:
      - "3006:3006"
    environment:
      NODE_ENV: development
      PORT: 3006
      MONGODB_URL: mongodb://mongo:27017/onetime_chat
      REDIS_URL: redis://redis:6379
      CONSUL_HOST: consul
    depends_on:
      - mongo
      - redis
    networks:
      - onetime-network
    restart: unless-stopped
    profiles:
      - full-stack

  # MongoDB (Chat Service용)
  mongo:
    image: mongo:6-jammy
    container_name: onetime-mongo
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - onetime-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - full-stack

  # 모니터링 (선택적)
  prometheus:
    image: prom/prometheus:latest
    container_name: onetime-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    networks:
      - onetime-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: onetime-grafana
    ports:
      - "3030:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - onetime-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  mongo_data:
  prometheus_data:
  grafana_data:

networks:
  onetime-network:
    driver: bridge