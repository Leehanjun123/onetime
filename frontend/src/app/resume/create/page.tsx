'use client'

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import ProtectedRoute from '@/components/ProtectedRoute';

// Ï†ÑÎ¨∏ Î∂ÑÏïº Îç∞Ïù¥ÌÑ∞
const specialties = [
  { id: '1', name: 'Ï†ÑÍ∏∞', code: 'ELECTRIC', icon: '‚ö°', skills: ['Ï†ÑÍ∏∞ Î∞∞ÏÑ† ÏûëÏóÖ', 'Ï°∞Î™ÖÍ∏∞Íµ¨ ÏÑ§Ïπò', 'ÏΩòÏÑºÌä∏/Ïä§ÏúÑÏπò ÍµêÏ≤¥', 'Î∂ÑÏ†ÑÎ∞ò ÏûëÏóÖ', 'LED Ï°∞Î™Ö ÍµêÏ≤¥'] },
  { id: '2', name: 'Î™©Í≥µ', code: 'CARPENTRY', icon: 'üî®', skills: ['Î∂ôÎ∞ïÏù¥Ïû• Ï†úÏûë', 'Î™∞Îî© ÏãúÍ≥µ', 'Î¨∏/Ï∞ΩÎ¨∏ ÏÑ§Ïπò', 'Î™©Ïû¨ ÎßàÎ£® ÏãúÍ≥µ', 'Ï≤úÏû• ÏûëÏóÖ'] },
  { id: '3', name: 'ÏÉ∑Ïãú', code: 'SASH', icon: 'ü™ü', skills: ['ÏÉ∑Ïãú ÍµêÏ≤¥', 'Ï∞ΩÎ¨∏ ÏÑ§Ïπò', 'Î∞©ÏùåÏ∞Ω ÏãúÍ≥µ', 'Ïú†Î¶¨ ÍµêÏ≤¥', 'Î∞úÏΩîÎãà ÌôïÏû•'] },
  { id: '4', name: 'Ï≤†Í±∞', code: 'DEMOLITION', icon: 'üèóÔ∏è', skills: ['Ïù∏ÌÖåÎ¶¨Ïñ¥ Ï≤†Í±∞', 'Î≤ΩÏ≤¥ Ï≤†Í±∞', 'Î∞îÎã• Ï≤†Í±∞', 'Ï≤úÏû• Ï≤†Í±∞', 'ÌèêÍ∏∞Î¨º Ï≤òÎ¶¨'] },
  { id: '5', name: 'ÏóêÏñ¥Ïª®', code: 'AIRCON', icon: '‚ùÑÔ∏è', skills: ['ÏóêÏñ¥Ïª® ÏÑ§Ïπò', 'ÏóêÏñ¥Ïª® Ïù¥Ï†ÑÏÑ§Ïπò', 'ÏóêÏñ¥Ïª® Ï≤≠ÏÜå', 'ÎÉâÎß§ Ï∂©Ï†Ñ', 'ÏãúÏä§ÌÖú ÏóêÏñ¥Ïª®'] },
  { id: '6', name: 'ÏÑ§ÎπÑ', code: 'PLUMBING', icon: 'üîß', skills: ['ÏàòÎèÑ Î∞∞Í¥Ä', 'ÌïòÏàò Î∞∞Í¥Ä', 'Î≥¥ÏùºÎü¨ ÏÑ§Ïπò', 'ÏöïÏã§ ÏÑ§ÎπÑ', 'Ï£ºÎ∞© ÏÑ§ÎπÑ'] },
  { id: '7', name: 'ÎßàÎ£®', code: 'FLOOR', icon: 'ü™µ', skills: ['Í∞ïÌôîÎßàÎ£® ÏãúÍ≥µ', 'Í∞ïÎßàÎ£® ÏãúÍ≥µ', 'ÏõêÎ™©ÎßàÎ£® ÏãúÍ≥µ', 'ÎßàÎ£® Î≥¥Ïàò', 'Í±∏Î†àÎ∞õÏù¥ ÏãúÍ≥µ'] },
  { id: '8', name: 'ÌÉÄÏùº', code: 'TILE', icon: 'üü¶', skills: ['Î∞îÎã• ÌÉÄÏùº ÏãúÍ≥µ', 'Î≤Ω ÌÉÄÏùº ÏãúÍ≥µ', 'ÏöïÏã§ ÌÉÄÏùº', 'Ï£ºÎ∞© ÌÉÄÏùº', 'Ï§ÑÎàà ÏãúÍ≥µ'] },
  { id: '9', name: 'Ïû•Ìåê', code: 'LINOLEUM', icon: 'üìê', skills: ['Ïû•Ìåê ÏãúÍ≥µ', 'Îç∞ÏΩîÌÉÄÏùº ÏãúÍ≥µ', 'PVC Î∞îÎã•Ïû¨', 'Í±∞Ïã§ Ïû•Ìåê', 'Î∞© Ïû•Ìåê'] },
  { id: '10', name: 'ÎèÑÎ∞∞', code: 'WALLPAPER', icon: 'üé®', skills: ['Ïã§ÌÅ¨ Î≤ΩÏßÄ', 'Ìï©ÏßÄ Î≤ΩÏßÄ', 'Î∞© ÎèÑÎ∞∞', 'Í±∞Ïã§ ÎèÑÎ∞∞', 'Ï≤úÏû• ÎèÑÎ∞∞'] },
  { id: '11', name: 'Í∞ÄÍµ¨', code: 'FURNITURE', icon: 'ü™ë', skills: ['Í∞ÄÍµ¨ Ï°∞Î¶Ω', 'Î∂ôÎ∞ïÏù¥Ïû• ÏÑ§Ïπò', 'Ï£ºÎ∞©Í∞ÄÍµ¨ ÏÑ§Ïπò', 'Í∞ÄÍµ¨ Ïù¥Îèô', 'Í∞ÄÍµ¨ ÏàòÎ¶¨'] },
  { id: '12', name: 'ÎØ∏Ïû•', code: 'PLASTERING', icon: 'üè†', skills: ['Î≤ΩÎ©¥ ÎØ∏Ïû•', 'Ï≤úÏû• ÎØ∏Ïû•', 'ÌéòÏù∏Ìä∏ ÎèÑÏÉâ', 'Î∞©Ïàò ÏûëÏóÖ', 'Í∑†Ïó¥ Î≥¥Ïàò'] }
];

export default function CreateResumePage() {
  const router = useRouter();
  const [step, setStep] = useState(1);
  const [formData, setFormData] = useState({
    // Í∏∞Î≥∏ Ï†ïÎ≥¥
    title: '',
    summary: '',
    totalExperience: 0,
    desiredWage: '',
    workableArea: [] as string[],
    availableDays: [] as string[],
    availableTime: '',
    ownedEquipment: [] as string[],
    
    // Ï†ÑÎ¨∏ Î∂ÑÏïº
    selectedSpecialties: [] as any[],
    
    // Í≤ΩÎ†•ÏÇ¨Ìï≠
    experiences: [] as any[],
    
    // ÏûêÍ≤©Ï¶ù
    certifications: [] as any[]
  });

  const [currentExperience, setCurrentExperience] = useState({
    companyName: '',
    position: '',
    jobType: '',
    startDate: '',
    endDate: '',
    isCurrent: false,
    description: '',
    achievements: [] as string[]
  });

  const [currentCertification, setCurrentCertification] = useState({
    name: '',
    issuer: '',
    issueDate: '',
    expiryDate: '',
    certNumber: ''
  });

  const areas = ['ÏÑúÏö∏', 'Í≤ΩÍ∏∞', 'Ïù∏Ï≤ú', 'Î∂ÄÏÇ∞', 'ÎåÄÍµ¨', 'Í¥ëÏ£º', 'ÎåÄÏ†Ñ', 'Ïö∏ÏÇ∞', 'ÏÑ∏Ï¢Ö', 'Í∞ïÏõê', 'Ï∂©Î∂Å', 'Ï∂©ÎÇ®', 'Ï†ÑÎ∂Å', 'Ï†ÑÎÇ®', 'Í≤ΩÎ∂Å', 'Í≤ΩÎÇ®', 'Ï†úÏ£º'];
  const days = ['Ïõî', 'Ìôî', 'Ïàò', 'Î™©', 'Í∏à', 'ÌÜ†', 'Ïùº'];
  const equipments = ['Ï†ÑÎèôÎìúÎ¶¥', 'Í∑∏ÎùºÏù∏Îçî', 'Ïö©Ï†ëÍ∏∞', 'Ïª¥ÌîÑÎ†àÏÑú', 'ÏÇ¨Îã§Î¶¨', 'ÏïàÏ†ÑÏû•ÎπÑ', 'Ï∏°Ï†ïÎèÑÍµ¨', 'Ï†ÑÎèôÌÜ±', 'ÌÉÄÏùºÏª§ÌÑ∞', 'ÎØ∏Ïû•ÎèÑÍµ¨'];

  const handleSpecialtyToggle = (specialty: any) => {
    const isSelected = formData.selectedSpecialties.find(s => s.id === specialty.id);
    if (isSelected) {
      setFormData(prev => ({
        ...prev,
        selectedSpecialties: prev.selectedSpecialties.filter(s => s.id !== specialty.id)
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        selectedSpecialties: [...prev.selectedSpecialties, {
          ...specialty,
          experienceYears: 0,
          proficiency: 'BASIC',
          selectedSkills: []
        }]
      }));
    }
  };

  const handleSkillToggle = (specialtyId: string, skill: string) => {
    setFormData(prev => ({
      ...prev,
      selectedSpecialties: prev.selectedSpecialties.map(s => {
        if (s.id === specialtyId) {
          const hasSkill = s.selectedSkills?.includes(skill);
          return {
            ...s,
            selectedSkills: hasSkill 
              ? s.selectedSkills.filter((sk: string) => sk !== skill)
              : [...(s.selectedSkills || []), skill]
          };
        }
        return s;
      })
    }));
  };

  const addExperience = () => {
    if (currentExperience.companyName && currentExperience.position) {
      setFormData(prev => ({
        ...prev,
        experiences: [...prev.experiences, currentExperience]
      }));
      setCurrentExperience({
        companyName: '',
        position: '',
        jobType: '',
        startDate: '',
        endDate: '',
        isCurrent: false,
        description: '',
        achievements: []
      });
    }
  };

  const addCertification = () => {
    if (currentCertification.name && currentCertification.issuer) {
      setFormData(prev => ({
        ...prev,
        certifications: [...prev.certifications, currentCertification]
      }));
      setCurrentCertification({
        name: '',
        issuer: '',
        issueDate: '',
        expiryDate: '',
        certNumber: ''
      });
    }
  };

  const handleSubmit = async () => {
    try {
      // Ïù¥Î†•ÏÑú Îç∞Ïù¥ÌÑ∞ Ï§ÄÎπÑ
      const resumeData = {
        title: formData.title || 'ÏùºÏö©ÏßÅ Ïù¥Î†•ÏÑú',
        summary: formData.summary,
        totalExperience: formData.totalExperience,
        desiredWage: formData.desiredWage,
        workableArea: formData.workableArea,
        availableDays: formData.availableDays
      };

      const token = localStorage.getItem('token');
      if (!token) {
        alert('Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.');
        router.push('/login');
        return;
      }

      const response = await fetch('https://onetime-production.up.railway.app/api/v1/resume', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify(resumeData)
      });

      const result = await response.json();

      if (result.success) {
        alert('ÏùºÏö©ÏßÅ Ïù¥Î†•ÏÑúÍ∞Ä ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
        router.push('/jobs/daily');
      } else {
        alert(result.message || 'Ïù¥Î†•ÏÑú Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    } catch (error) {
      console.error('Ïù¥Î†•ÏÑú Îì±Î°ù Ïò§Î•ò:', error);
      alert('Ïù¥Î†•ÏÑú Îì±Î°ù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    }
  };

  const renderStep = () => {
    switch(step) {
      case 1:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Í∏∞Î≥∏ Ï†ïÎ≥¥</h2>
            
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Ïù¥Î†•ÏÑú Ï†úÎ™© *
              </label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                placeholder="Ïòà: 20ÎÖÑ Í≤ΩÎ†• Ï†ÑÍ∏∞ Í∏∞Ïà†Ïûê"
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                ÏûêÍ∏∞ÏÜåÍ∞ú
              </label>
              <textarea
                rows={4}
                value={formData.summary}
                onChange={(e) => setFormData(prev => ({ ...prev, summary: e.target.value }))}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                placeholder="Î≥∏Ïù∏Ïùò Í≤ΩÎ†•Í≥º Í∞ïÏ†êÏùÑ Í∞ÑÎã®Ìûà ÏÜåÍ∞úÌï¥Ï£ºÏÑ∏Ïöî"
              />
            </div>

            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ï¥ù Í≤ΩÎ†• (ÎÖÑ)
                </label>
                <input
                  type="number"
                  value={formData.totalExperience}
                  onChange={(e) => setFormData(prev => ({ ...prev, totalExperience: parseInt(e.target.value) }))}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                  min="0"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Ìù¨Îßù ÏùºÎãπ (Ïõê)
                </label>
                <input
                  type="text"
                  value={formData.desiredWage}
                  onChange={(e) => setFormData(prev => ({ ...prev, desiredWage: e.target.value }))}
                  className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500"
                  placeholder="150,000"
                />
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Í∑ºÎ¨¥ Í∞ÄÎä• ÏßÄÏó≠
              </label>
              <div className="grid grid-cols-4 gap-2">
                {areas.map(area => (
                  <button
                    key={area}
                    type="button"
                    onClick={() => {
                      const isSelected = formData.workableArea.includes(area);
                      setFormData(prev => ({
                        ...prev,
                        workableArea: isSelected 
                          ? prev.workableArea.filter(a => a !== area)
                          : [...prev.workableArea, area]
                      }));
                    }}
                    className={`px-3 py-2 rounded-lg border text-sm ${
                      formData.workableArea.includes(area)
                        ? 'bg-indigo-500 text-white border-indigo-500'
                        : 'bg-white text-gray-700 border-gray-300 hover:border-indigo-300'
                    }`}
                  >
                    {area}
                  </button>
                ))}
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Í∑ºÎ¨¥ Í∞ÄÎä• ÏöîÏùº
              </label>
              <div className="flex gap-2">
                {days.map(day => (
                  <button
                    key={day}
                    type="button"
                    onClick={() => {
                      const isSelected = formData.availableDays.includes(day);
                      setFormData(prev => ({
                        ...prev,
                        availableDays: isSelected
                          ? prev.availableDays.filter(d => d !== day)
                          : [...prev.availableDays, day]
                      }));
                    }}
                    className={`px-4 py-2 rounded-full ${
                      formData.availableDays.includes(day)
                        ? 'bg-indigo-500 text-white'
                        : 'bg-gray-200 text-gray-700 hover:bg-gray-300'
                    }`}
                  >
                    {day}
                  </button>
                ))}
              </div>
            </div>
          </div>
        );

      case 2:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Ï†ÑÎ¨∏ Î∂ÑÏïº ÏÑ†ÌÉù</h2>
            
            <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
              {specialties.map(specialty => {
                const isSelected = formData.selectedSpecialties.find(s => s.id === specialty.id);
                return (
                  <div
                    key={specialty.id}
                    className={`border-2 rounded-xl p-4 cursor-pointer transition-all ${
                      isSelected 
                        ? 'border-indigo-500 bg-indigo-50' 
                        : 'border-gray-200 hover:border-gray-300'
                    }`}
                    onClick={() => handleSpecialtyToggle(specialty)}
                  >
                    <div className="text-3xl mb-2">{specialty.icon}</div>
                    <h3 className="font-bold text-lg">{specialty.name}</h3>
                    <p className="text-sm text-gray-600">{specialty.code}</p>
                    
                    {isSelected && (
                      <div className="mt-4 space-y-3" onClick={(e) => e.stopPropagation()}>
                        <div>
                          <label className="text-xs text-gray-600">Í≤ΩÎ†•</label>
                          <select
                            value={isSelected.experienceYears || 0}
                            onChange={(e) => {
                              setFormData(prev => ({
                                ...prev,
                                selectedSpecialties: prev.selectedSpecialties.map(s =>
                                  s.id === specialty.id 
                                    ? { ...s, experienceYears: parseInt(e.target.value) }
                                    : s
                                )
                              }));
                            }}
                            className="w-full mt-1 px-2 py-1 text-sm border rounded"
                          >
                            <option value="0">Ïã†ÏûÖ</option>
                            <option value="1">1ÎÖÑ</option>
                            <option value="3">3ÎÖÑ</option>
                            <option value="5">5ÎÖÑ</option>
                            <option value="10">10ÎÖÑ+</option>
                          </select>
                        </div>
                        
                        <div>
                          <label className="text-xs text-gray-600">ÏàôÎ†®ÎèÑ</label>
                          <select
                            value={isSelected.proficiency || 'BASIC'}
                            onChange={(e) => {
                              setFormData(prev => ({
                                ...prev,
                                selectedSpecialties: prev.selectedSpecialties.map(s =>
                                  s.id === specialty.id 
                                    ? { ...s, proficiency: e.target.value }
                                    : s
                                )
                              }));
                            }}
                            className="w-full mt-1 px-2 py-1 text-sm border rounded"
                          >
                            <option value="BASIC">Ï¥àÍ∏â</option>
                            <option value="INTERMEDIATE">Ï§ëÍ∏â</option>
                            <option value="ADVANCED">Í≥†Í∏â</option>
                            <option value="EXPERT">Ï†ÑÎ¨∏Í∞Ä</option>
                          </select>
                        </div>

                        <div>
                          <label className="text-xs text-gray-600">Î≥¥Ïú† Ïä§ÌÇ¨</label>
                          <div className="mt-1 space-y-1">
                            {specialty.skills.map(skill => (
                              <label key={skill} className="flex items-center text-xs">
                                <input
                                  type="checkbox"
                                  checked={isSelected.selectedSkills?.includes(skill) || false}
                                  onChange={() => handleSkillToggle(specialty.id, skill)}
                                  className="mr-2"
                                />
                                {skill}
                              </label>
                            ))}
                          </div>
                        </div>
                      </div>
                    )}
                  </div>
                );
              })}
            </div>
          </div>
        );

      case 3:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">Í≤ΩÎ†•ÏÇ¨Ìï≠</h2>
            
            <div className="bg-gray-50 p-4 rounded-lg space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <input
                  type="text"
                  placeholder="ÌöåÏÇ¨Î™Ö"
                  value={currentExperience.companyName}
                  onChange={(e) => setCurrentExperience(prev => ({ ...prev, companyName: e.target.value }))}
                  className="px-3 py-2 border rounded-lg"
                />
                <input
                  type="text"
                  placeholder="ÏßÅÏ±Ö/ÏßÅÎ¨¥"
                  value={currentExperience.position}
                  onChange={(e) => setCurrentExperience(prev => ({ ...prev, position: e.target.value }))}
                  className="px-3 py-2 border rounded-lg"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <div>
                  <label className="text-xs text-gray-600">ÏãúÏûëÏùº</label>
                  <input
                    type="date"
                    value={currentExperience.startDate}
                    onChange={(e) => setCurrentExperience(prev => ({ ...prev, startDate: e.target.value }))}
                    className="w-full px-3 py-2 border rounded-lg"
                  />
                </div>
                <div>
                  <label className="text-xs text-gray-600">Ï¢ÖÎ£åÏùº</label>
                  <input
                    type="date"
                    value={currentExperience.endDate}
                    onChange={(e) => setCurrentExperience(prev => ({ ...prev, endDate: e.target.value }))}
                    className="w-full px-3 py-2 border rounded-lg"
                    disabled={currentExperience.isCurrent}
                  />
                  <label className="flex items-center mt-1 text-sm">
                    <input
                      type="checkbox"
                      checked={currentExperience.isCurrent}
                      onChange={(e) => setCurrentExperience(prev => ({ ...prev, isCurrent: e.target.checked }))}
                      className="mr-2"
                    />
                    ÌòÑÏû¨ Ïû¨ÏßÅÏ§ë
                  </label>
                </div>
              </div>

              <textarea
                placeholder="Ï£ºÏöî ÏóÖÎ¨¥ ÎÇ¥Ïö©"
                value={currentExperience.description}
                onChange={(e) => setCurrentExperience(prev => ({ ...prev, description: e.target.value }))}
                className="w-full px-3 py-2 border rounded-lg"
                rows={3}
              />

              <button
                type="button"
                onClick={addExperience}
                className="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600"
              >
                Í≤ΩÎ†• Ï∂îÍ∞Ä
              </button>
            </div>

            {formData.experiences.length > 0 && (
              <div className="space-y-2">
                <h3 className="font-bold">Îì±Î°ùÎêú Í≤ΩÎ†•</h3>
                {formData.experiences.map((exp, index) => (
                  <div key={index} className="bg-white p-3 rounded-lg border">
                    <div className="flex justify-between">
                      <div>
                        <p className="font-medium">{exp.companyName}</p>
                        <p className="text-sm text-gray-600">{exp.position}</p>
                        <p className="text-xs text-gray-500">
                          {exp.startDate} ~ {exp.isCurrent ? 'Ïû¨ÏßÅÏ§ë' : exp.endDate}
                        </p>
                      </div>
                      <button
                        onClick={() => {
                          setFormData(prev => ({
                            ...prev,
                            experiences: prev.experiences.filter((_, i) => i !== index)
                          }));
                        }}
                        className="text-red-500 hover:text-red-700"
                      >
                        ÏÇ≠Ï†ú
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        );

      case 4:
        return (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-gray-900">ÏûêÍ≤©Ï¶ù Î∞è Ïû•ÎπÑ</h2>
            
            <div className="bg-gray-50 p-4 rounded-lg space-y-4">
              <h3 className="font-bold">ÏûêÍ≤©Ï¶ù Ï∂îÍ∞Ä</h3>
              <div className="grid grid-cols-2 gap-4">
                <input
                  type="text"
                  placeholder="ÏûêÍ≤©Ï¶ùÎ™Ö"
                  value={currentCertification.name}
                  onChange={(e) => setCurrentCertification(prev => ({ ...prev, name: e.target.value }))}
                  className="px-3 py-2 border rounded-lg"
                />
                <input
                  type="text"
                  placeholder="Î∞úÍ∏âÍ∏∞Í¥Ä"
                  value={currentCertification.issuer}
                  onChange={(e) => setCurrentCertification(prev => ({ ...prev, issuer: e.target.value }))}
                  className="px-3 py-2 border rounded-lg"
                />
              </div>

              <div className="grid grid-cols-2 gap-4">
                <input
                  type="date"
                  placeholder="Î∞úÍ∏âÏùº"
                  value={currentCertification.issueDate}
                  onChange={(e) => setCurrentCertification(prev => ({ ...prev, issueDate: e.target.value }))}
                  className="px-3 py-2 border rounded-lg"
                />
                <input
                  type="text"
                  placeholder="ÏûêÍ≤©Ï¶ù Î≤àÌò∏"
                  value={currentCertification.certNumber}
                  onChange={(e) => setCurrentCertification(prev => ({ ...prev, certNumber: e.target.value }))}
                  className="px-3 py-2 border rounded-lg"
                />
              </div>

              <button
                type="button"
                onClick={addCertification}
                className="bg-indigo-500 text-white px-4 py-2 rounded-lg hover:bg-indigo-600"
              >
                ÏûêÍ≤©Ï¶ù Ï∂îÍ∞Ä
              </button>
            </div>

            {formData.certifications.length > 0 && (
              <div className="space-y-2">
                <h3 className="font-bold">Îì±Î°ùÎêú ÏûêÍ≤©Ï¶ù</h3>
                {formData.certifications.map((cert, index) => (
                  <div key={index} className="bg-white p-3 rounded-lg border flex justify-between">
                    <div>
                      <p className="font-medium">{cert.name}</p>
                      <p className="text-sm text-gray-600">{cert.issuer}</p>
                    </div>
                    <button
                      onClick={() => {
                        setFormData(prev => ({
                          ...prev,
                          certifications: prev.certifications.filter((_, i) => i !== index)
                        }));
                      }}
                      className="text-red-500 hover:text-red-700"
                    >
                      ÏÇ≠Ï†ú
                    </button>
                  </div>
                ))}
              </div>
            )}

            <div>
              <h3 className="font-bold mb-3">Î≥¥Ïú† Ïû•ÎπÑ</h3>
              <div className="grid grid-cols-3 gap-2">
                {equipments.map(equipment => (
                  <button
                    key={equipment}
                    type="button"
                    onClick={() => {
                      const isSelected = formData.ownedEquipment.includes(equipment);
                      setFormData(prev => ({
                        ...prev,
                        ownedEquipment: isSelected
                          ? prev.ownedEquipment.filter(e => e !== equipment)
                          : [...prev.ownedEquipment, equipment]
                      }));
                    }}
                    className={`px-3 py-2 rounded-lg text-sm ${
                      formData.ownedEquipment.includes(equipment)
                        ? 'bg-indigo-500 text-white'
                        : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
                    }`}
                  >
                    {equipment}
                  </button>
                ))}
              </div>
            </div>
          </div>
        );

      default:
        return null;
    }
  };

  return (
    <ProtectedRoute>
      <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-4xl mx-auto px-4">
        <div className="bg-white rounded-xl shadow-lg p-8">
          {/* Progress Bar */}
          <div className="mb-8">
            <div className="flex items-center justify-between mb-4">
              {[1, 2, 3, 4].map((stepNumber) => (
                <div key={stepNumber} className="flex items-center">
                  <div
                    className={`w-10 h-10 rounded-full flex items-center justify-center text-sm font-bold ${
                      step >= stepNumber
                        ? 'bg-indigo-600 text-white'
                        : 'bg-gray-200 text-gray-600'
                    }`}
                  >
                    {stepNumber}
                  </div>
                  {stepNumber < 4 && (
                    <div
                      className={`w-20 h-0.5 ${
                        step > stepNumber ? 'bg-indigo-600' : 'bg-gray-200'
                      }`}
                    />
                  )}
                </div>
              ))}
            </div>
            <div className="flex justify-between text-xs text-gray-600">
              <span>Í∏∞Î≥∏Ï†ïÎ≥¥</span>
              <span>Ï†ÑÎ¨∏Î∂ÑÏïº</span>
              <span>Í≤ΩÎ†•ÏÇ¨Ìï≠</span>
              <span>ÏûêÍ≤©/Ïû•ÎπÑ</span>
            </div>
          </div>

          {/* Form Content */}
          {renderStep()}

          {/* Navigation Buttons */}
          <div className="flex justify-between mt-8">
            <button
              onClick={() => setStep(Math.max(1, step - 1))}
              disabled={step === 1}
              className={`px-6 py-3 rounded-lg font-medium ${
                step === 1
                  ? 'bg-gray-200 text-gray-400 cursor-not-allowed'
                  : 'bg-gray-300 text-gray-700 hover:bg-gray-400'
              }`}
            >
              Ïù¥Ï†Ñ
            </button>

            {step < 4 ? (
              <button
                onClick={() => setStep(Math.min(4, step + 1))}
                className="px-6 py-3 bg-indigo-600 text-white rounded-lg font-medium hover:bg-indigo-700"
              >
                Îã§Ïùå
              </button>
            ) : (
              <button
                onClick={handleSubmit}
                className="px-6 py-3 bg-green-600 text-white rounded-lg font-medium hover:bg-green-700"
              >
                Ïù¥Î†•ÏÑú Îì±Î°ù
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
    </ProtectedRoute>
  );
}