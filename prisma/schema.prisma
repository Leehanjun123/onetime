generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 사용자 모델 (단순화)
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  userType  UserType @default(WORKER)
  verified  Boolean  @default(false)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 관계
  jobs         Job[]
  applications JobApplication[]

  @@map("users")
}

// 일자리 모델 (단순화)
model Job {
  id          String    @id @default(cuid())
  title       String
  description String
  category    String
  location    String
  wage        Int       // 시급
  workDate    DateTime
  status      JobStatus @default(OPEN)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // 관계
  employer     User             @relation(fields: [employerId], references: [id])
  employerId   String
  applications JobApplication[]

  @@map("jobs")
}

// 지원 모델 (단순화)
model JobApplication {
  id        String            @id @default(cuid())
  status    ApplicationStatus @default(PENDING)
  message   String?
  createdAt DateTime          @default(now())

  // 관계
  job      Job    @relation(fields: [jobId], references: [id])
  jobId    String
  worker   User   @relation(fields: [workerId], references: [id])
  workerId String

  @@unique([jobId, workerId])
  @@map("job_applications")
}

<<<<<<< HEAD
// Enums (필수만)
=======
// 작업 세션 모델
model WorkSession {
  id         String    @id @default(cuid())
  startTime  DateTime
  endTime    DateTime?
  totalHours Float?
  totalPay   Int?
  status     SessionStatus @default(IN_PROGRESS)
  photos     String?   // 작업 사진 URLs (JSON string)
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // 관계
  job      Job    @relation(fields: [jobId], references: [id])
  jobId    String @unique
  worker   User   @relation(fields: [workerId], references: [id])
  workerId String

  @@map("work_sessions")
}

// 리뷰 모델
model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-5 별점
  comment  String
  createdAt DateTime @default(now())

  // 관계
  job        Job    @relation(fields: [jobId], references: [id])
  jobId      String
  reviewer   User   @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewerId String
  reviewee   User   @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  revieweeId String

  @@map("reviews")
}

// Enums
>>>>>>> complete-recovery
enum UserType {
  WORKER
  EMPLOYER
}

enum JobStatus {
  OPEN
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}