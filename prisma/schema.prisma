// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 사용자 모델
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  phone       String?  @unique
  name        String
  password    String?  // 비밀번호 (소셜 로그인은 null 가능)
  avatar      String?
  userType    UserType @default(WORKER)
  verified    Boolean  @default(false)
  rating      Float    @default(0.0)
  totalEarned Int      @default(0)
  lastLoginAt DateTime?
  lastLoginIp String?
  isOnline    Boolean  @default(false)
  lastSeenAt  DateTime?
  pushToken   String?
  notificationSettings Json?
  status      UserStatus @default(ACTIVE)
  twoFactorEnabled Boolean @default(false)
  twoFactorSecret  String?
  verificationToken String?
  verificationExpiry DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 관계
  jobs        Job[]
  applications JobApplication[]
  reviews     Review[]         @relation("ReviewsReceived")
  givenReviews Review[]        @relation("ReviewsGiven")
  workSessions WorkSession[]
  savedJobs    SavedJob[]
  savedCompanies SavedCompany[] @relation("SavedCompanies")
  companySavedBy SavedCompany[] @relation("CompanySavedBy")
  payments     Payment[]
  workerPayments Payment[]     @relation("WorkerPayments")
  businessPayments Payment[]   @relation("BusinessPayments")
  settlements  Settlement[]
  wallet       Wallet?
  transactions Transaction[]
  notifications Notification[]
  verificationTokens VerificationToken[]
  portfolioFiles PortfolioFile[]
  conversations1 Conversation[] @relation("ConversationUser1")
  conversations2 Conversation[] @relation("ConversationUser2")
  messages Message[]
  refreshTokens RefreshToken[]
  loginHistory LoginHistory[]
  suspiciousActivities SuspiciousActivity[]
  userRoles UserRole[]
  securityEvents SecurityEvent[]
  trustScore TrustScore?
  deviceFingerprints DeviceFingerprint[]
  sessionTokens SessionToken[]
  workerProfile WorkerProfile?
  jobMatches JobMatch[]
  matchingPreferences MatchingPreferences?

  @@map("users")
}

// 일자리 모델
model Job {
  id          String     @id @default(cuid())
  title       String
  description String
  category    JobCategory
  location    String
  wage        Int        // 시급 (원)
  workDate    DateTime
  workHours   Int        // 예상 작업 시간
  status      JobStatus  @default(OPEN)
  urgent      Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 관계
  employer     User             @relation(fields: [employerId], references: [id])
  employerId   String
  applications JobApplication[]
  workSession  WorkSession?
  reviews      Review[]
  savedBy      SavedJob[]
  payments     Payment[]
  settlements  Settlement[]
  settlementItems SettlementItem[]
  jobMatches   JobMatch[]

  @@map("jobs")
}

// 지원 모델
model JobApplication {
  id        String            @id @default(cuid())
  status    ApplicationStatus @default(PENDING)
  message   String?
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  // 관계
  job      Job    @relation(fields: [jobId], references: [id])
  jobId    String
  worker   User   @relation(fields: [workerId], references: [id])
  workerId String

  @@unique([jobId, workerId])
  @@map("job_applications")
}

// 작업 세션 모델
model WorkSession {
  id         String    @id @default(cuid())
  startTime  DateTime
  endTime    DateTime?
  totalHours Float?
  totalPay   Int?
  status     SessionStatus @default(IN_PROGRESS)
  photos     String[]  // 작업 사진 URLs
  notes      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  // 관계
  job      Job    @relation(fields: [jobId], references: [id])
  jobId    String @unique
  worker   User   @relation(fields: [workerId], references: [id])
  workerId String

  @@map("work_sessions")
}

// 리뷰 모델
model Review {
  id       String @id @default(cuid())
  rating   Int    // 1-5 별점
  comment  String
  createdAt DateTime @default(now())

  // 관계
  job        Job    @relation(fields: [jobId], references: [id])
  jobId      String
  reviewer   User   @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewerId String
  reviewee   User   @relation("ReviewsReceived", fields: [revieweeId], references: [id])
  revieweeId String

  @@map("reviews")
}

// Enums
enum UserType {
  WORKER
  EMPLOYER
  ADMIN
}

enum JobCategory {
  CONSTRUCTION
  INTERIOR
  LOGISTICS
  FACTORY
  CLEANING
  DELIVERY
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum SessionStatus {
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// 저장된 일자리 모델
model SavedJob {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // 관계
  user   User   @relation(fields: [userId], references: [id])
  userId String
  job    Job    @relation(fields: [jobId], references: [id])
  jobId  String
  
  @@unique([userId, jobId])
  @@map("saved_jobs")
}

// 저장된 회사 모델  
model SavedCompany {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  
  // 관계
  user      User   @relation("SavedCompanies", fields: [userId], references: [id])
  userId    String
  company   User   @relation("CompanySavedBy", fields: [companyId], references: [id])
  companyId String
  
  @@unique([userId, companyId])
  @@map("saved_companies")
}

// 결제 모델 (개선됨)
model Payment {
  id          String   @id @default(cuid())
  orderId     String   @unique
  paymentKey  String?  @unique
  amount      Int
  feeAmount   Int      @default(0)
  netAmount   Int
  status      PaymentStatus @default(PENDING)
  method      PaymentMethod @default(CARD)
  pgProvider  String?  // 토스페이먼츠, 카카오페이 등
  pgTransactionId String? @unique
  
  orderName   String
  customerName String
  customerEmail String
  customerMobilePhone String?
  
  approvedAt  DateTime?
  cancelledAt DateTime?
  failedAt    DateTime?
  
  cancelReason String?
  cancelAmount Int?
  refundedAmount Int @default(0)
  failReason  String?
  
  receipt     Json?
  transactionKey String?
  metadata    Json?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  job         Job?     @relation(fields: [jobId], references: [id])
  jobId       String?
  worker      User?    @relation("WorkerPayments", fields: [workerId], references: [id])
  workerId    String?
  business    User?    @relation("BusinessPayments", fields: [businessId], references: [id])
  businessId  String?
  refunds     Refund[]
  transactions Transaction[]
  settlementItems SettlementItem[]
  
  @@index([jobId])
  @@index([workerId])
  @@index([businessId])
  @@index([status])
  @@index([createdAt])
  @@map("payments")
}

// 트랜잭션 모델 (신규)
model Transaction {
  id          String   @id @default(cuid())
  type        TransactionType
  amount      Int
  description String
  referenceId String?  // 관련 엔티티 ID
  metadata    Json?
  createdAt   DateTime @default(now())
  
  // 관계
  payment     Payment? @relation(fields: [paymentId], references: [id])
  paymentId   String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  @@index([paymentId])
  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@map("transactions")
}

// 지갑 모델 (신규)
model Wallet {
  id                  String   @id @default(cuid())
  balance             Int      @default(0)
  pendingBalance      Int      @default(0)
  withdrawableBalance Int      @default(0)
  totalEarned         Int      @default(0)
  totalWithdrawn      Int      @default(0)
  lastUpdatedAt       DateTime @default(now())
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // 관계
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  
  @@map("wallets")
}

// 환불 모델
model Refund {
  id          String   @id @default(cuid())
  amount      Int
  reason      String
  status      RefundStatus @default(PENDING)
  refundedAt  DateTime?
  
  createdAt   DateTime @default(now())
  
  // 관계
  payment     Payment  @relation(fields: [paymentId], references: [id])
  paymentId   String
  
  @@map("refunds")
}

// 정산 모델 (개선됨)
model Settlement {
  id            String   @id @default(cuid())
  amount        Int
  feeAmount     Int      @default(0)
  netAmount     Int
  status        SettlementStatus @default(PENDING)
  scheduledAt   DateTime
  processedAt   DateTime?
  
  bankName      String?
  bankAccount   String?
  bankCode      String?
  accountHolder String?
  failReason    String?
  
  metadata      Json?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // 관계
  worker        User     @relation(fields: [workerId], references: [id])
  workerId      String
  job           Job?     @relation(fields: [jobId], references: [id])
  jobId         String?
  items         SettlementItem[]
  
  @@index([workerId])
  @@index([status])
  @@index([scheduledAt])
  @@map("settlements")
}

// 정산 항목 모델 (신규)
model SettlementItem {
  id            String   @id @default(cuid())
  amount        Int
  feeAmount     Int      @default(0)
  netAmount     Int
  createdAt     DateTime @default(now())
  
  // 관계
  settlement    Settlement @relation(fields: [settlementId], references: [id])
  settlementId  String
  payment       Payment  @relation(fields: [paymentId], references: [id])
  paymentId     String
  job           Job      @relation(fields: [jobId], references: [id])
  jobId         String
  
  @@unique([settlementId, paymentId])
  @@index([paymentId])
  @@index([jobId])
  @@map("settlement_items")
}

// 알림 모델
model Notification {
  id          String   @id @default(cuid())
  type        NotificationType
  title       String
  message     String
  read        Boolean  @default(false)
  readAt      DateTime?
  relatedId   String?  // 관련 엔티티 ID
  metadata    Json?
  
  createdAt   DateTime @default(now())
  
  // 관계
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  
  @@index([userId, read])
  @@index([userId, createdAt])
  @@map("notifications")
}

// 인증 토큰 모델
model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  type      TokenType
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  used      Boolean  @default(false)
  usedAt    DateTime?
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([token])
  @@index([userId, type])
  @@map("verification_tokens")
}

// 포트폴리오 파일 모델
model PortfolioFile {
  id        String   @id @default(cuid())
  fileName  String
  filePath  String
  fileType  String
  fileSize  Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@index([userId])
  @@map("portfolio_files")
}

// 대화방 모델
model Conversation {
  id            String   @id @default(cuid())
  user1Id       String
  user2Id       String
  lastMessage   String?
  lastMessageAt DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  user1         User     @relation("ConversationUser1", fields: [user1Id], references: [id])
  user2         User     @relation("ConversationUser2", fields: [user2Id], references: [id])
  messages      Message[]

  @@unique([user1Id, user2Id])
  @@index([user1Id])
  @@index([user2Id])
  @@index([lastMessageAt])
  @@map("conversations")
}

// 메시지 모델
model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  type           MessageType  @default(TEXT)
  read           Boolean      @default(false)
  readAt         DateTime?
  createdAt      DateTime     @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender         User         @relation(fields: [senderId], references: [id])

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

// Enums
enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
  PARTIAL_REFUNDED
}

enum PaymentMethod {
  CARD
  TRANSFER
  VIRTUAL_ACCOUNT
  MOBILE
}

enum RefundStatus {
  PENDING
  COMPLETED
  FAILED
}

enum SettlementStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum TransactionType {
  PAYMENT
  REFUND
  SETTLEMENT
  FEE
  WITHDRAWAL
  DEPOSIT
}

enum NotificationType {
  SYSTEM
  JOB_APPLICATION
  APPLICATION_STATUS
  PAYMENT
  SETTLEMENT
  CHAT
  REVIEW
  JOB_SUGGESTION
  NEW_APPLICATION
  APPLICATION_CANCELLED
}

enum TokenType {
  EMAIL_VERIFY
  PASSWORD_RESET
  PHONE_VERIFY
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

// Security Models
model RefreshToken {
  id         String    @id @default(cuid())
  userId     String
  tokenId    String    @unique
  tokenHash  String
  deviceInfo Json?
  expiresAt  DateTime
  lastUsedAt DateTime?
  revokedAt  DateTime?
  createdAt  DateTime  @default(now())
  
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([tokenId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model LoginHistory {
  id         String   @id @default(cuid())
  userId     String
  ip         String?
  userAgent  String?
  deviceType String?
  browser    String?
  os         String?
  country    String?
  city       String?
  timestamp  DateTime @default(now())
  
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([timestamp])
  @@map("login_history")
}

model SuspiciousActivity {
  id        String   @id @default(cuid())
  userId    String
  type      String
  details   Json?
  resolved  Boolean  @default(false)
  timestamp DateTime @default(now())
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([timestamp])
  @@index([type])
  @@map("suspicious_activities")
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  DELETED
}

// Enterprise Security Models
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  level       Int      @default(0)
  isSystem    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  permissions RolePermission[]
  userRoles   UserRole[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  category    String
  resource    String
  action      String
  createdAt   DateTime @default(now())
  
  rolePermissions RolePermission[]
  
  @@unique([resource, action])
  @@index([category])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  context      Json?
  constraints  Json?
  createdAt    DateTime   @default(now())
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        String    @id @default(cuid())
  userId    String
  roleId    String
  context   Json?
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

model SecurityEvent {
  id         String   @id @default(cuid())
  userId     String?
  eventType  String
  severity   String
  source     String
  details    Json
  ipAddress  String?
  userAgent  String?
  timestamp  DateTime @default(now())
  resolved   Boolean  @default(false)
  resolvedAt DateTime?
  
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([eventType])
  @@index([severity])
  @@index([timestamp])
  @@map("security_events")
}

model TrustScore {
  id              String   @id @default(cuid())
  userId          String   @unique
  score           Int      @default(50)
  deviceTrust     Int      @default(50)
  behaviorTrust   Int      @default(50)
  locationTrust   Int      @default(50)
  networkTrust    Int      @default(50)
  lastUpdated     DateTime @default(now())
  calculationData Json?
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("trust_scores")
}

model DeviceFingerprint {
  id           String   @id @default(cuid())
  userId       String
  fingerprint  String
  deviceInfo   Json
  trusted      Boolean  @default(false)
  firstSeen    DateTime @default(now())
  lastSeen     DateTime @default(now())
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, fingerprint])
  @@index([fingerprint])
  @@map("device_fingerprints")
}

model SessionToken {
  id              String   @id @default(cuid())
  userId          String
  tokenId         String   @unique
  tokenHash       String
  trustScore      Int      @default(50)
  deviceId        String?
  ipAddress       String?
  location        Json?
  expiresAt       DateTime
  lastUsedAt      DateTime?
  revokedAt       DateTime?
  multiFactorAuth Boolean  @default(false)
  createdAt       DateTime @default(now())
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([tokenId])
  @@index([expiresAt])
  @@map("session_tokens")
}

// AI 매칭 시스템 모델들
model WorkerProfile {
  id               String   @id @default(cuid())
  userId           String   @unique
  skills           String[] // 보유 기술/능력
  experience       Int      @default(0) // 경력 년수
  preferredLocations String[] // 선호 지역
  preferredCategories JobCategory[] // 선호 업무 카테고리
  availableHours   Json?    // 가능한 시간대 {mon: [9,18], tue: [9,18] ...}
  minWage          Int?     // 최소 희망 시급
  maxDistance      Int?     // 최대 이동 거리 (km)
  workStyle        String?  // 업무 스타일 선호도
  certifications   String[] // 자격증/인증
  portfolioUrl     String?  // 포트폴리오 URL
  bio              String?  // 자기소개
  emergencyContact Json?    // 비상 연락처
  transportation   String[] // 이용 가능한 교통수단
  
  // AI 매칭 점수 관련
  matchingScore    Float    @default(0.0) // 전체 매칭 점수
  reliabilityScore Float    @default(0.0) // 신뢰도 점수
  skillScore       Float    @default(0.0) // 기술 점수
  responseScore    Float    @default(0.0) // 응답성 점수
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("worker_profiles")
}

model JobMatch {
  id               String      @id @default(cuid())
  jobId            String
  workerId         String
  matchScore       Float       // 0.0 ~ 1.0 매칭 점수
  scoreBreakdown   Json        // 점수 세부 분석
  distanceScore    Float       // 거리 점수
  skillScore       Float       // 기술 점수  
  scheduleScore    Float       // 스케줄 점수
  wageScore        Float       // 급여 점수
  experienceScore  Float       // 경험 점수
  reliabilityScore Float       // 신뢰도 점수
  preferenceScore  Float       // 선호도 점수
  
  status           MatchStatus @default(GENERATED)
  viewedByWorker   Boolean     @default(false)
  viewedByEmployer Boolean     @default(false)
  appliedAt        DateTime?
  rejectedAt       DateTime?
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  
  job              Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  worker           User        @relation(fields: [workerId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, workerId])
  @@index([jobId])
  @@index([workerId])
  @@index([matchScore])
  @@index([status])
  @@map("job_matches")
}

model MatchingHistory {
  id          String   @id @default(cuid())
  jobId       String
  workerId    String
  action      MatchAction
  score       Float?
  reason      String?
  metadata    Json?
  createdAt   DateTime @default(now())
  
  @@index([jobId])
  @@index([workerId])
  @@index([action])
  @@index([createdAt])
  @@map("matching_history")
}

model MatchingPreferences {
  id                  String   @id @default(cuid())
  userId              String   @unique
  autoMatchEnabled    Boolean  @default(true)
  maxMatchesPerDay    Int      @default(10)
  minMatchScore       Float    @default(0.6)
  preferredNotifyTime Json?    // 알림 선호 시간
  enablePushNotify    Boolean  @default(true)
  enableEmailNotify   Boolean  @default(false)
  enableSmsNotify     Boolean  @default(false)
  
  // 가중치 설정 (사용자 커스터마이징)
  distanceWeight      Float    @default(0.2)
  skillWeight         Float    @default(0.25)
  scheduleWeight      Float    @default(0.2)
  wageWeight          Float    @default(0.15)
  experienceWeight    Float    @default(0.1)
  reliabilityWeight   Float    @default(0.1)
  
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("matching_preferences")
}

enum MatchStatus {
  GENERATED    // 생성됨
  VIEWED       // 조회됨
  APPLIED      // 지원함
  REJECTED     // 거절됨
  EXPIRED      // 만료됨
}

enum MatchAction {
  GENERATED    // 매치 생성
  VIEWED       // 매치 조회
  APPLIED      // 지원
  REJECTED     // 거절
  EXPIRED      // 만료
  FEEDBACK     // 피드백
}
