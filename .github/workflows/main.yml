name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  NODE_VERSION: '18.x'
  POSTGRES_VERSION: '15'

jobs:
  # 코드 품질 체크
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint || true
        continue-on-error: true
        
      - name: Check code formatting
        run: npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}" || true
        continue-on-error: true

  # 백엔드 테스트
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: onetime_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/onetime_test
        run: |
          npx prisma generate
          npx prisma migrate deploy
          
      - name: Run backend tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/onetime_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test
        run: npm test
        
      - name: Generate test coverage
        run: npm run test:coverage || true
        continue-on-error: true
        
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/coverage-final.json
          flags: backend
          name: backend-coverage

  # 프론트엔드 테스트
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
          
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Type check
        run: npm run type-check || true
        continue-on-error: true
        
      - name: Build frontend
        env:
          NEXT_PUBLIC_API_BASE_URL: ${{ secrets.API_BASE_URL }}
        run: npm run build
        
      - name: Run unit tests
        run: npm test -- --passWithNoTests || true
        continue-on-error: true

  # E2E 테스트
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: onetime_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install backend dependencies
        run: npm ci
        
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci --legacy-peer-deps
        
      - name: Setup database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/onetime_test
        run: |
          npx prisma generate
          npx prisma migrate deploy
          
      - name: Start backend server
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/onetime_test
          JWT_SECRET: test-secret
          NODE_ENV: test
          PORT: 5000
        run: |
          npm start &
          npx wait-on http://localhost:5000/health -t 30000
          
      - name: Run Cypress E2E tests
        working-directory: ./frontend
        env:
          CYPRESS_BASE_URL: http://localhost:3000
          CYPRESS_API_URL: http://localhost:5000
        run: |
          npm run build
          npm run start &
          npx wait-on http://localhost:3000 -t 30000
          npm run test:e2e
          
      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-screenshots
          path: frontend/cypress/screenshots
          
      - name: Upload Cypress videos
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: cypress-videos
          path: frontend/cypress/videos

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
          
      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate || true
          cd frontend && npm audit --audit-level=moderate || true
        continue-on-error: true

  # Docker 빌드 및 푸시
  docker-build:
    name: Docker Build & Push
    runs-on: ubuntu-latest
    needs: [code-quality, backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/onetime-backend:latest
            ${{ secrets.DOCKER_USERNAME }}/onetime-backend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/onetime-backend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/onetime-backend:buildcache,mode=max
          
      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/onetime-frontend:latest
            ${{ secrets.DOCKER_USERNAME }}/onetime-frontend:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/onetime-frontend:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/onetime-frontend:buildcache,mode=max

  # 배포 (Railway)
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [e2e-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Railway CLI
        run: npm install -g @railway/cli
        
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service backend
        continue-on-error: true

  # Slack 알림
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [deploy-railway]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Deployment Status: ${{ job.status }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
            Message: ${{ github.event.head_commit.message }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        if: secrets.SLACK_WEBHOOK != ''
        continue-on-error: true

  # 성능 테스트
  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://onetime-frontend.vercel.app/
            https://onetime-frontend.vercel.app/jobs
          uploadArtifacts: true
          temporaryPublicStorage: true
        continue-on-error: true